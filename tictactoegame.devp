
recipe Board {
	board, winConditions;
	ingredients {
		attr board => for (i -> 0:9) => 0;
		attr winConditions => [
			[0, 1, 2],
			[3, 4, 5],
			[6, 7, 8],

			[0, 3, 6],
			[1, 4, 7],
			[2, 5, 8],

			[0, 4, 8],
			[2, 4, 6]
		];
	}

	method place<index, player> {
		if (index > 8 | index < 0) { return false;}
		if (this::board-index != 0) { return false; }
		pop(this::board, index);
		insert(this::board, player, index);
		return true;
	}

	method toString {
		var out => "";
		for (i -> 0:9) {
			out += ({0: '-', 1: 'x', 2: 'o'}.this::board-i) + "   ";
			if (!floating((i + 1) / 3)) {
				out += "\n";
			}
		}
		return out;
	}
	
	method win<player> {
		var i;
		for (condition <- this::winConditions) {
			i => 0;
			for (index <- condition) => 
				if (this::board-index == player) { i++; }
			if (i == 3) { return true; }
		} return false;
	}

	method stalemate {
		for (i <- this::board) => 
			if (i == 0) { return false; }
		return true;
	}
};

fn game {
	var board => Board();
	bake playing => ! -> !board::win(1) & !board::win(2) & !board::stalemate();	

	fn place<player> {
		var ind => -1;
		while (!board::place(ind, player)) {
			ind => nfield("What spot (1-9)") - 1;
		}
	}

	while (playing()) {
		println(board::toString());
		place(1);
		if (!playing()) { break; }
		println(board::toString());
		place(2);
	}
	println(board::toString());
}

fn main {
	game();
}



